import Foundation
import SwiftData

/// StyleFeedback represents user feedback on style recommendations
@Model
final class StyleFeedback {
    var id: UUID
    var createdAt: Date
    
    // The recommendation that received feedback
    var recommendationType: RecommendationType
    var recommendationId: UUID? // ID of the outfit or item
    
    // User's response
    var response: FeedbackResponse
    var rating: Int? // 1-5 rating if applicable
    var comment: String?
    
    // Context of the recommendation
    var context: FeedbackContext
    
    // Relationship to style preference
    @Relationship var preference: StylePreference?
    
    enum RecommendationType: String, Codable {
        case outfit
        case item
        case style
        case color
        case brand
    }
    
    enum FeedbackResponse: String, Codable {
        case liked
        case disliked
        case saved
        case tried
        case purchased
        case ignored
    }
    
    struct FeedbackContext: Codable, Hashable {
        var occasion: Occasion?
        var time: Date
        var adventureLevel: Double? // How far outside comfort zone
    }
    
    init(
        id: UUID = UUID(),
        createdAt: Date = Date(),
        recommendationType: RecommendationType,
        recommendationId: UUID? = nil,
        response: FeedbackResponse,
        rating: Int? = nil,
        comment: String? = nil,
        context: FeedbackContext,
        preference: StylePreference? = nil
    ) {
        self.id = id
        self.createdAt = createdAt
        self.recommendationType = recommendationType
        self.recommendationId = recommendationId
        self.response = response
        self.rating = rating
        self.comment = comment
        self.context = context
        self.preference = preference
    }
}

/// StyleRecommendation represents a style recommendation generated by the system
struct StyleRecommendation {
    let id: UUID
    let type: StyleFeedback.RecommendationType
    let targetId: UUID? // ID of recommended outfit or item
    let confidence: Double // How confident the system is about this recommendation
    let adventureLevel: Double // How far outside the user's comfort zone
    let reason: String // Explanation for the recommendation
    let basedOn: [UUID]? // IDs of items/styles this recommendation is based on
    
    // For new item recommendations
    let category: ClothingCategory?
    let style: StyleTag?
    let color: String?
    let brand: String?
    
    // Context
    let forOccasion: Occasion?
    let forSeason: Season?
} 